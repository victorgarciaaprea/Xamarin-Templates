<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(WixTargetsPath)" Condition=" Exists('$(WixTargetsPath)') " />

  <PropertyGroup>
    <TemplateDirs>$([System.IO.Directory]::GetDirectories("$(MSBuildProjectDirectory)\..\.."))</TemplateDirs>
  </PropertyGroup>

  <ItemGroup>
    <IntermediateAssembly Remove="@(IntermediateAssembly)" />
    <BuiltProjectOutputGroupKeyOutput Remove="@(BuiltProjectOutputGroupKeyOutput)" />
    <TemplateDir Include="$(TemplateDirs)" Exclude="$([MSBuild]::NormalizeDirectory('$(MSBuildProjectDirectory)\..').TrimEnd('\'))" />
  </ItemGroup>

	<PropertyGroup>
		<!-- We use the fourth digit as the base number to add commits on top, which allows us to 
			 to increment between previews before RTW -->
		<_GitBaseVersionExpr>^v?(?&lt;MAJOR&gt;\d+)\.(?&lt;MINOR&gt;\d+)\.(?&lt;PATCH&gt;\d+)(\.(?&lt;COMMITS&gt;\d+))?(?:\-(?&lt;LABEL&gt;[\dA-Za-z\-\.]+))?$|^(?&lt;LABEL&gt;[\dA-Za-z\-\.]+)\-v?(?&lt;MAJOR&gt;\d+)\.(?&lt;MINOR&gt;\d+)\.(?&lt;PATCH&gt;\d+)(\.(?&lt;COMMITS&gt;\d+))?$</_GitBaseVersionExpr>	
	</PropertyGroup>

	<Target Name="AddBaseCommits" BeforeTargets="_GitPopulateVersionInfo" AfterTargets="_GitValidateBaseVersion">
		<PropertyGroup>
			<GitBaseCommits>$([System.Text.RegularExpressions.Regex]::Match($(GitBaseVersion), $(_GitBaseVersionExpr)).Groups['COMMITS'].Value)</GitBaseCommits>
			<GitCommits Condition="'$(GitBaseCommits)' != ''">$([MSBuild]::Add('$(GitBaseCommits)', '$(GitCommits)'))</GitCommits>
		</PropertyGroup>
	</Target>

  <Target Name="AfterRestore" DependsOnTargets="Restore" AfterTargets="Restore">
    <MakeDir Directories="$(NuGetCacheDir)" Condition="!Exists('$(NuGetCacheDir)')" />
    <MSBuild Projects="analyzer.props" Targets="Restore" />
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="RestoreTemplatePackages" Properties="ForceEval=$([System.Guid]::NewGuid().ToString())" />
  </Target>

  <Target Name="CopyArtifacts" AfterTargets="Build" Condition="'$(Out)' != ''">
    <MakeDir Directories="$(Out)" Condition="!Exists('$(Out)')" />
    <Copy SourceFiles="$(TargetPath)" DestinationFolder="$(Out)" />
  </Target>

  <Target Name="RestoreTemplatePackages" Inputs="@(TemplateDir)" Outputs="%(Identity)-BATCH" Condition="'$(RestoreTemplatePackages)' != 'false'">
    <Exec Command='"$(RoslynTargetsPath)\csi.exe" analyzer.csx "%(TemplateDir.Identity)"'
          Condition="!$([MSBuild]::ValueOrDefault('%(TemplateDir.Identity)', '').EndsWith('.git'))" />
    <Exec Command='"$(MSBuildBinPath)\MSBuild.exe" packages.proj /t:Restore /v:m /noautoresponse /bl:$([System.IO.Path]::Combine($(PackageOutputPath), %(TemplateDir.Filename).binlog))'
          Condition="!$([MSBuild]::ValueOrDefault('%(TemplateDir.Identity)', '').EndsWith('.git'))" />
  </Target>

  <Target Name="CleanNuGets" AfterTargets="Clean">
    <RemoveDir Directories="$(NuGetCacheDir)" Condition="Exists('$(NuGetCacheDir)')" ContinueOnError="true" />
    <!-- Retry in case it failed before for whatever reason -->
    <RemoveDir Directories="$(NuGetCacheDir)" Condition="Exists('$(NuGetCacheDir)')" />
  </Target>

  <Target Name="AddDefineConstants" BeforeTargets="PrepareForBuild" DependsOnTargets="GitVersion">
    <PropertyGroup>
      <DefineConstants>
        ProductVersion=$(GitSemVerMajor).$(GitSemVerMinor).$(GitSemVerPatch);
        FileVersion=$(GitSemVerMajor).$(GitSemVerMinor).$(GitSemVerPatch);
        $(DefineConstants)
      </DefineConstants>
    </PropertyGroup>
  </Target>

  <Target Name="SetTargetName" BeforeTargets="_CheckRequiredProperties" DependsOnTargets="GitVersion">
    
    <PropertyGroup>
      <OutputName>Xamarin.NuGetCache.$(GitSemVerMajor).$(GitSemVerMinor).$(GitSemVerPatch)</OutputName>
      <TargetName>$(OutputName)</TargetName>
      <TargetFileName>$(TargetName)$(TargetExt)</TargetFileName>
      <TargetPath>$(TargetDir)$(TargetFileName)</TargetPath>
      <ProjectDefineConstants>
        Configuration=$(ConfigurationName);
        Platform=$(PlatformName);
        ProjectDir=$(ProjectDir);
        ProjectExt=$(ProjectExt);
        ProjectFileName=$(ProjectFileName);
        ProjectName=$(ProjectName);
        ProjectPath=$(ProjectPath);
        TargetDir=$(TargetDir);
        TargetExt=$(TargetExt);
        TargetFileName=$(TargetFileName);
        TargetName=$(TargetName);
        TargetPath=$(TargetPath);
      </ProjectDefineConstants>
    </PropertyGroup>

    <ItemGroup>
      <BuiltProjectOutputGroupKeyOutput Include="$(TargetPath)">
        <IsKeyOutput>true</IsKeyOutput>
        <FinalOutputPath>$(TargetPath)</FinalOutputPath>
        <TargetPath>$(TargetFileName)</TargetPath>
      </BuiltProjectOutputGroupKeyOutput>
      <IntermediateAssembly Include="$(IntermediateOutputPath)$(TargetName)$(TargetExt)"/>
    </ItemGroup>

  </Target>

  <Target Name="AddFacadeReferences" />
  <Target Name="GetReferenceAssemblyPaths" />

</Project>
